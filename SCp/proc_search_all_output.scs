//Searchs all output vertexes from input _parameter
scp_program -> proc_search_all_output (*	
	-> rrel_params: .proc_search_all_output_params (*
		-> rrel_1: rrel_in: _parameter;;
		-> rrel_2: rrel_out: _answer;;
	*);;

	-> rrel_operators: .proc_search_all_output_operator_set (*

		//Generating _set_of_elem
		-> rrel_init: .proc_search_all_output_operator1 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _set_elem;;

			=> nrel_goto: .proc_search_all_output_operator2;;
		*);;


		//Next two operators are just to make sure we return something
		-> .proc_search_all_output_operator2 (*
			<- genElStr3;;
			-> rrel_1: rrel_assign: rrel_scp_var: _answer;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1_tut;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _parameter;;

			=> nrel_goto: ..proc_erase;;
		*);;

		->..proc_erase(*
			<-eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc1_tut;;
			=> nrel_goto: .proc_search_all_output_operator3;;
		*);;

		//Searching all possible targets from _parameter
		-> .proc_search_all_output_operator3 (*
		 	<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _parameter;;
			-> rrel_2: rrel_assign:rrel_common: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _elem;;

			-> rrel_set_3: rrel_fixed: rrel_scp_var: _set_elem;;

			=> nrel_then: .proc_search_all_output_operator4;;
			=> nrel_else: .proc_search_all_output_operator_return;;
		*);;

		//Taking one of the elements..
		-> .proc_search_all_output_operator4 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_elem;;
			-> rrel_2: rrel_assign: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _curr_elem;;

			=> nrel_then: .proc_search_all_output_operator5;;
			=> nrel_else: .proc_search_all_output_operator8;;
		*);;

		//Removing it from the _set_elem
		-> .proc_search_all_output_operator5 (*
		 <- eraseEl;;
		 -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc1;;

		 => nrel_goto: .proc_search_all_output_operator6;;
		*);;


		-> .proc_search_all_output_operator6 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: system_element;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _curr_elem;;

			=> nrel_then: .proc_search_all_output_operator4;;
			=> nrel_else: ..is_valid_element;;
		*);;

		-> .proc_search_all_output_operator6_1 (*
		 <- searchElStr3;;
		 -> rrel_1: rrel_fixed: rrel_scp_var: _answer;;
		 -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		 -> rrel_3: rrel_fixed: rrel_scp_var: _curr_elem;;

		 => nrel_then: .proc_search_all_output_operator4;;
		 => nrel_else: ..is_valid_element;;
		*);;

		//Before adding to _answer, we should make sure its real weight. nrel_system_identifier greatly helps us with it
		-> ..is_valid_element (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _curr_elem;;
			-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var:_element_idtf;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_system_identifier;;
			=> nrel_then: .proc_search_all_output_operator7;;		
			=> nrel_else: .proc_search_all_output_operator4;;		
		*);;


		-> .proc_search_all_output_operator7 (*
		 <- genElStr3;;
		 -> rrel_1: rrel_fixed: rrel_scp_var: _answer;;
		 -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		 -> rrel_3: rrel_fixed: rrel_scp_var: _curr_elem;;

		 => nrel_goto: .proc_search_all_output_operator4;;
		*);;

		-> .proc_search_all_output_operator_print_result (*
		 <- printEl;;
		 -> rrel_1: rrel_fixed: rrel_scp_var: _answer;;

		 => nrel_goto: .proc_search_all_output_operator8;;
		*);;


		-> .proc_search_all_output_operator8 (*
		 <- eraseEl;;
		 -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _set_elem;;

		 => nrel_goto: .proc_search_all_output_operator_return;;
		*);;

		-> .proc_search_all_output_operator_return (*
		 <- return;;
		*);;
	*);;
*);;